import boto3
import os

# Assuming that AWS_KEY_ID and AWS_SECRET are set as environment variables
# AWS_KEY_ID = os.getenv('AWS_KEY_ID')
# AWS_SECRET = os.getenv('AWS_SECRET')

# Generate the boto3 client for interacting with S3
s3 = boto3.client('s3', region_name='us-east-1', 
                  aws_access_key_id=AWS_KEY_ID, 
                  aws_secret_access_key=AWS_SECRET)

# List the buckets
buckets = s3.list_buckets()

# Print the buckets
print("Existing buckets:")
for bucket in buckets['Buckets']:
    print(f"- {bucket['Name']}")

# *************************************
import boto3
# import os

# # Assuming AWS credentials are stored in environment variables
# AWS_KEY_ID = os.getenv('AWS_KEY_ID')
# AWS_SECRET = os.getenv('AWS_SECRET')

# Generate the boto3 client for interacting with S3 and SNS
s3 = boto3.client(
    's3', 
    region_name='us-east-1', 
    aws_access_key_id=AWS_KEY_ID, 
    aws_secret_access_key=AWS_SECRET
)

sns = boto3.client(
    'sns', 
    region_name='us-east-1', 
    aws_access_key_id=AWS_KEY_ID, 
    aws_secret_access_key=AWS_SECRET
)

# List S3 buckets and SNS topics
buckets = s3.list_buckets()
topics = sns.list_topics()

# Print out the list of SNS topics
print("SNS Topics:")
for topic in topics['Topics']:
    print(f"- {topic['TopicArn']}")
    
    
# -------------------

import boto3
# import os

# # Assuming AWS credentials are stored in environment variables
# AWS_KEY_ID = os.getenv('AWS_KEY_ID')
# AWS_SECRET = os.getenv('AWS_SECRET')

# Create boto3 client to S3
s3 = boto3.client(
    's3', 
    region_name='us-east-1', 
    aws_access_key_id=AWS_KEY_ID, 
    aws_secret_access_key=AWS_SECRET
)

# Create the buckets
response_staging = s3.create_bucket(Bucket='gim-staging')
response_processed = s3.create_bucket(Bucket='gim-processed')
response_test = s3.create_bucket(Bucket='gim-test')

# Print out the response for the 'gim-staging' bucket
print("Response for 'gim-staging':")
print(response_staging)



#--------

# Assuming the boto3 S3 client is already initialized and assigned to the variable `s3`

# Get the list_buckets response
response = s3.list_buckets()

# Iterate over Buckets from .list_buckets() response
print("List of buckets in S3:")
for bucket in response['Buckets']:
    # Print the name for each bucket
    print(bucket['Name'])

# Assuming the boto3 S3 client is already initialized and assigned to the variable `s3`

# Delete the gim-test bucket
s3.delete_bucket(Bucket='gim-test')

# Get the list_buckets response
response = s3.list_buckets()

# Print each Bucket's Name
print("Remaining buckets in S3 after deletion:")
for bucket in response['Buckets']:
    print(bucket['Name'])

# Assuming the boto3 S3 client is already initialized and assigned to the variable `s3`

# Get the list_buckets response
response = s3.list_buckets()

# Delete all the buckets with 'gim' in their names
for bucket in response['Buckets']:
    if 'gim' in bucket['Name']:
        print(f"Deleting bucket: {bucket['Name']}")
        # To delete a bucket, it must be empty. So we need to ensure the bucket is empty before deleting.
        # First, list all objects in the bucket and delete them
        objects = s3.list_objects_v2(Bucket=bucket['Name'])
        
        if 'Contents' in objects:
            for obj in objects['Contents']:
                print(f"Deleting object: {obj['Key']} from bucket: {bucket['Name']}")
                s3.delete_object(Bucket=bucket['Name'], Key=obj['Key'])
        
        # Now, we can delete the bucket
        s3.delete_bucket(Bucket=bucket['Name'])
        print(f"Deleted bucket: {bucket['Name']}")

# Create new buckets
s3.create_bucket(Bucket='gid-staging')
s3.create_bucket(Bucket='gid-processed')
print("Created new buckets: gid-staging and gid-processed")

# Print the updated bucket listing after deletion and creation
response = s3.list_buckets()
print("Current buckets in S3:")
for bucket in response['Buckets']:
    print(bucket['Name'])